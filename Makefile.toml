#=====================================#
#     cargo-make configuration        #
#=====================================#

[config]
skip_core_tasks = true
default_to_workspace = false

#=====================================#
#     All Platforms                   #
#=====================================#

[tasks.default]
alias = "build"

[tasks.clean]
dependencies = ["clean-db", "clean-swift"]

[tasks.run]
dependencies = ["build-cli"]
command = "./target/debug/khiin_cli"

[tasks.build]
dependencies = [
    # All
    "build-db",
    "build-cli",

    # Windows
    "build-win32-tip",
    "build-win32-settings",

    # Swift (Shared)
    "build-swift-bridge",
    "build-swift-protos",
    "copy-db-swift",

    # iOS
    "xcodegen",

    # macOS
    "build-osx",
]

[tasks.build-cli]
command = "cargo"
args = ["build", "--manifest-path=cli/Cargo.toml"]
dependencies = ["copy-db-to-target"]

#=====================================#
#     Windows                         #
#=====================================#

[tasks.build-win32-tip]
condition = { platforms = ["windows"] }
command = "cargo"
args = ["build", "--manifest-path=windows/ime/Cargo.toml"]
dependencies = ["copy-db-to-target"]

[tasks.build-win32-settings]
condition = { platforms = ["windows"] }
command = "cargo"
args = ["build", "--manifest-path=windows/settings/Cargo.toml"]

#=====================================#
#     macOS & iOS                     #
#=====================================#

[tasks.clean-swift]
condition = { platforms = ["mac"] }
dependencies = ["clean-db", "clean-xcodeproj"]
script_runner = "@shell"
script = '''
rm -rf swift/KhiinBridge
rm -rf swift/osx/.build
rm -rf swift/osx/Package.resolved
rm -rf swift/shared/.build
rm -rf swift/shared/src/protos
rm -rf swift/shared/Package.resolved
'''

[tasks.build-osx]
condition = { platforms = ["mac"] }
dependencies = ["copy-db", "build-swift-bridge", "build-swift-protos"]
command = "sh"
args = ["swift/osx/build.sh"]

[tasks.watch-osx]
condition = { platforms = ["mac"] }
dependencies = ["copy-db", "build-swift-bridge", "build-swift-protos"]
command = "sh"
args = ["swift/osx/build.sh"]
watch = { postpone = true, watch = ["./swift/osx", "./swift/shared"] }

[tasks.build-swift-libs]
condition = { platforms = ["mac"] }
command = "sh"
args = ["./swift/bridge/build.sh"]

[tasks.build-khiin-swift]
condition = { platforms = ["mac"] }
command = "cargo"
args = ["build", "--manifest-path=swift/bridge/Cargo.toml"]
dependencies = ["build-swift-libs"]

[tasks.build-swift-bridge]
env = { "MACOSX_DEPLOYMENT_TARGET" = "12.0" }
condition = { platforms = ["mac"] }
dependencies = ["build-swift-libs", "build-khiin-swift"]
cwd = "swift"
command = "swift-bridge-cli"
args = [
    "create-package",
    "--bridges-dir",
    "./bridge/generated",
    "--out-dir",
    "KhiinBridge",
    "--ios",
    "../target/aarch64-apple-ios/debug/libkhiin_swift.a",
    "--simulator",
    "../target/universal-ios/debug/libkhiin_swift.a",
    "--macos",
    "../target/universal-macos/debug/libkhiin_swift.a",
    "--name",
    "KhiinBridge",
]

[tasks.build-swift-protos]
condition = { platforms = ["mac"] }
cwd = "protos/src"
script_runner = "@shell"
script = '''
mkdir -p ../../swift/shared/src/protos
protoc --swift_opt=Visibility=Public --swift_out=../../swift/shared/src/protos *.proto
'''

[tasks.xcodegen]
condition = { platforms = ["mac"] }
dependencies = ["build-swift-protos", "copy-db-swift", "build-swift-bridge"]
cwd = "swift/ios"
command = "xcodegen"

# [tasks.build-khiinim]
# condition = { platforms = ["mac"] }
# dependencies = ["xcodegen"]
# script_runner = "@shell"
# script = '''
# BUILD_DIR=$(pwd)/target/KhiinIM
# LIB_DIR=/Users/$(id -un)/Library
# killall -9 KhiinIM || true
# rm -rf $BUILD_DIR
# rm -rf $LIB_DIR/Containers/com.edwardgreve.inputmethod.KhiinIM
# rm -rf $LIB_DIR/Developer/Xcode/DerivedData/Khiin-*/
# cd swift
# xcodebuild -scheme KhiinIM build CONFIGURATION_BUILD_DIR=$BUILD_DIR
# cp -R $BUILD_DIR/KhiinIM.app $LIB_DIR/Input\ Methods/
# ls -al $LIB_DIR/Input\ Methods
# echo "View logs with:"
# echo "tail -f ~/Library/Caches/KhiinIM/khiin_im.log"
# '''

[tasks.clean-xcodeproj]
condition = { platforms = ["mac"], files_exist = ["swift/ios/Khiin.xcodeproj"] }
script_runner = "@shell"
script = '''
rm -rf swift/ios/Khiin.xcodeproj
'''

[tasks.copy-db-swift]
condition = { platforms = ["mac"], files_exist = ["resources/khiin.db"] }
dependencies = ["copy-db"]
script_runner = "@shell"
script = '''
cp resources/khiin.db swift/Shared/khiin.db
'''

#=====================================#
#     Android                         #
#=====================================#

[tasks.build-droid]
dependencies = ["copy-db-droid"]

[tasks.copy-db-droid]
dependencies = ["copy-db"]
condition = { files_exist = ["resources/khiin.db"] }
script_runner = "@shell"
script = '''
mkdir -p android/app/src/main/assets
cp resources/khiin.db android/app/src/main/assets/khiin.db
'''

#=====================================#
#     Database                        #
#=====================================#

[tasks.db-rebuild]
dependencies = ["clean-db", "build-db", "copy-db"]

[tasks.clean-db]
script_runner = "@shell"
script = '''
rm -f data/out/khiin.db
rm -f resources/khiin.db
rm -f target/debug/khiin.db
rm -f swift/Shared/khiin.db
'''

[tasks.build-db]
cwd = "data"
condition = { files_not_exist = ["out/khiin.db"] }
command = "python3"
args = [
    "src/sql_gen.py",
    "-f",
    "data/frequency.csv",
    "-c",
    "data/conversions_all.csv",
    "-s",
    "data/syllables.txt",
    "-t",
    "-y",
    "data/symbols.tsv",
    "-e",
    "data/emoji.csv",
    "-o",
    "out/khiin_db.sql",
    "-d",
    "out/khiin.db",
]

[tasks.copy-db-to-target]
condition = { files_exist = ["resources/khiin.db"] }
script_runner = "@shell"
script = '''
mkdir -p target/debug
cp resources/khiin.db target/debug/khiin.db
'''
dependencies = ["copy-db"]

[tasks.copy-db]
condition = { files_not_exist = ["resources/khiin.db"] }
dependencies = ["build-db"]
script_runner = "@shell"
script = '''
mkdir -p resources
cp data/out/khiin.db resources/khiin.db
'''

#=====================================#
#     Testing                         #
#=====================================#

[tasks.test]
command = "cargo"
args = ["test", "--manifest-path=khiin/Cargo.toml"]

#=====================================#
#     Formatting                      #
#=====================================#

[tasks.format]
command = "cargo"
toolchain = "nightly"
args = ["fmt", "--", "--emit=files"]
